#!/usr/bin/env python
# -*- coding: utf-8 -*-
import click
from termcolor import colored
import os
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)
from servier.data import get_data, get_X_y, LOCAL_PATH
from servier.main import Trainer

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # or any {'0', '1', '2'}


@click.group()
def ml_servier():
    pass


@click.command()
@click.option('-s', '--split', is_flag=True)
@click.option('-m', '--model', default=1)
@click.option('-a', '--archi', default='mlp')
@click.option('-p', '--data_path', default=LOCAL_PATH)
def train(split, model, archi, data_path):
    dl_archi = 'mlp' if model == 1 else archi
    params = dict(fp_size=1024,
                  split=split,
                  estimator="NN",
                  model=dl_archi,
                  epochs=15,
                  gridsearch=False,
                  resample=False,
                  n_jobs=-1)
    print("############   Loading Data   ############")
    params["local"] = True
    df = get_data(path=data_path, **params)
    X_train, y_train = get_X_y(df)
    print("shape: {}".format(X_train.shape))
    print("size: {} Mb".format(X_train.memory_usage().sum() / 1e6))
    # Train and save model, locally and
    t = Trainer(X=X_train, y=y_train, **params)
    del X_train, y_train
    print(colored("############  Training model   ############", "red"))
    t.train()
    if split:
        print(colored("############  Evaluating model ############", "blue"))
        t.evaluate()
    print(colored("############   Saving model    ############", "green"))
    t.save_model(path='.')


@click.command()
@click.option('-m', '--model', default=1)
@click.option('-a', '--archi', default='mlp')
@click.option('-p', '--data_path', default=LOCAL_PATH)
def evaluate(model, archi, data_path):
    params = dict(split=False,
                  infer=True,
                  model_type=model
                  )
    df = get_data(test=True)
    X_test, y_test = get_X_y(df)
    evaluator = Trainer(X=X_test, y=y_test, **params)
    evaluator.evaluate()


@click.command()
def predict():
    click.echo('Welcome')


ml_servier.add_command(train)
ml_servier.add_command(evaluate)

if __name__ == '__main__':
    ml_servier()
